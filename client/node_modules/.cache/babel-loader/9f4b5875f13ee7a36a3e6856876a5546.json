{"ast":null,"code":"'use strict';\n\nmodule.exports = Base => class extends Base {\n  warn(code, message) {\n    let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (this.file) data.file = this.file;\n    if (this.cwd) data.cwd = this.cwd;\n    data.code = message instanceof Error && message.code || code;\n    data.tarCode = code;\n\n    if (!this.strict && data.recoverable !== false) {\n      if (message instanceof Error) {\n        data = Object.assign(message, data);\n        message = message.message;\n      }\n\n      this.emit('warn', data.tarCode, message, data);\n    } else if (message instanceof Error) this.emit('error', Object.assign(message, data));else this.emit('error', Object.assign(new Error(`${code}: ${message}`), data));\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}